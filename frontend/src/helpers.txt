  let user = {
          name: "John",
          age: 30
        };
// Object.keys(user) = ["name", "age"]
// Object.values(user) = ["John", 30]
// Object.entries(user) = [ ["name","John"], ["age",30] ]

// loop over values
for (let value of Object.values(user)) {
  console.log(value); // John, then 30
}

let prices = { banana: 1, orange: 2,  meat: 4, };

let doublePrices = Object.fromEntries(
  // convert prices to array, map each key/value pair into another pair
  // and then fromEntries gives back the object
  Object.entries(prices).map(entry => [entry[0], entry[1] * 2])
);

alert(doublePrices.meat); // 8

function sumSalaries(salaries) {

  let sum = 0;
  for (let salary of Object.values(salaries)) {
    sum += salary;
  }

  return sum; // 650
}

let salaries = {
  "John": 100,
  "Pete": 300,
  "Mary": 250
};

alert( sumSalaries(salaries) ); // 650



// reduce loops over array of salaries,
// adding them up
// and returns the result
function sumSalaries(salaries) {
  return Object.values(salaries).reduce((a, b) => a + b, 0) // 650
}


Write a function count(obj) that returns the number of properties in the object:
let user = {
  name: 'John',
  age: 30
};

alert( count(user) ); // 2

solution
function count(obj) {
  return Object.keys(obj).length;
}




const { Client } = require('pg');
let client = new Client({
  connectionString: "postgresql://postgres:test1234@192.168.225.86:5432/postgres"
});
const connectDB = async () => {
  try {
    console.log('Connect to Postgres ...');
    client.connect();
    await new Promise((resol, rej) => {
      client.query('Select now() as run_at;', (err, res) => {
        if(err) {
          console.log(err);
          reject(err);
        } else {
          console.log(`Run at date-time : ${res.rows[0].run_at}`);
          resol(res.rows[0].run_at);
        }
      })
    });
    await client.end();
    console.log('Execution Completed ...');
  } catch (err) {
    console.log('Error while Connecting DB !')
  }
}
connectDB();