version: "3.8"

volumes:
  postgres_data:
    name: postgis_data
  react_build:
    name: react_build
  static_volume:
    name: static
  media_volume:
    name: media
  redisdata:
    name: redis_data
  geoserver_data:
    name: geoserver_data
  pgadmin:
    name: pgadmin
  pgadmin_data:
    name: pgadmin_data

networks:
  backend:
    name: backend
    driver: bridge
  frontend:
    name: frontend
    driver: bridge
  global:


services:
  api:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: api
    hostname: api
    restart: "on-failure"
    entrypoint: /home/app/api/entrypoint.sh
    volumes:
      - ./backend:/home/app/api
      - static_volume:/home/app/api/static
      - media_volume:/home/app/api/media
    env_file:
      - ./backend/.env
    depends_on:
      - postgres-db
    networks:
      - frontend
      - backend

  postgres-db:
    restart: "on-failure"
    image: kartoza/postgis:${POSTGIS_VERSION_TAG}
    container_name: postgres-db
    hostname: postgres-db # use this name to connect to pg admin instance in instead of default localhost
    ports:
      - "5432:5432"
    volumes:
      - ./data/pgdata:/var/lib/postgresql
    environment:
#      - SCHEMA_NAME=${SCHEMA_NAME}
      - POSTGRES_DB=${POSTGRES_DBS} # to multiple database you can add coma separated databases eg gis,data
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    networks:
      - backend

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    hostname: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/root/.pgadmin
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres-db
    networks:
      - backend

  geoserver:
    restart: on-failure
    image: kartoza/geoserver:${GS_VERSION}
    container_name: geoserver
    hostname: geoserver
    volumes:
      - ./data/geodata:/opt/geoserver/data_dir
      - ./docker/certbot/certs/live/geospatialdev.com:/etc/certs
    depends_on:
      - postgres-db
    networks:
      - backend
      - frontend
    environment:
      - HOST=${POSTGRES_HOST}
      - DB_BACKEND=${DB_BACKEND} # Geoserver only accepts POSTGRES DB_BACKEND=POSTGRES
      - ENABLE_JSONP=true
      - GEOSERVER_DATA_DIR=${GEOSERVER_DATA_DIR}
      - GEOWEBCACHE_CACHE_DIR=${GEOWEBCACHE_CACHE_DIR}
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
      - INITIAL_MEMORY=${INITIAL_MEMORY}
      - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
      - STABLE_EXTENSIONS=${STABLE_EXTENSIONS}
      - COMMUNITY_EXTENSIONS=${COMMUNITY_EXTENSIONS}
      - SSL=true

#  redis:
#    restart: unless-stopped
#    container_name: redis
#    image: "redis:alpine"
#    expose:
#      - 6379
#    volumes:
#      - redisdata:/data
#    networks:
#      - backend
#
#  celery:
#    restart: unless-stopped
#    container_name: celery
#    build:
#      context: ./backend
#      dockerfile: ../docker/backend/Dockerfile
#    command: celery -A webgis worker -l info
#    volumes:
#      - ./backend:/home/app/api
##    env_file:
##      - .django
#    environment:
#      - DEBUG=${DEBUG}
#      - POSTGRES_HOST=${POSTGRES_HOST}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASS=${POSTGRES_PASS}
#      - POSTGRES_DB=${POSTGRES_NAME}
#      - CELERY_BROKER_URL=${CELERY_BROKER}
#      - CELERY_RESULT_BACKEND=${CELERY_BACKEND}
#    depends_on:
#      - api
#      - redis
#    networks:
#      - backend

  nginx:
    restart: always
    build:
      context: ./docker/nginx/prod
    container_name: nginx
#    depends_on:
#      - certbot
    volumes:
      - ./docker/nginx/prod/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./web:/home/web # serving index.html
      - static_volume:/home/api/static # sharing volumes with django to allow nginx to serve static files
      - media_volume:/home/api/media
      - ./docker/certbot/certs:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
      - backend

#  certbot:
#    image: certbot/certbot
#    container_name: certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    depends_on:
#      - nginx
#    networks:
#      - frontend
#      - backend
#    volumes:
#      #   - certs:/etc/nginx/certs
#  #       - html:/usr/share/nginx/html
#  #       - vhost:/etc/nginx/vhost.d
#      - ./docker/certbot/conf:/etc/letsencrypt:rw
#      - ./docker/certbot/www:/var/www/certbot:rw
#    command: certonly --webroot -w /var/www/certbot --force-renewal --email {EMAIL} -d {DOMAIN} --agree-tos


#  certbot:
#    image: certbot/certbot
#    container_name: certbot
##    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
##    depends_on:
##      - nginx
#    networks:
#      - api
#    stdin_open: true
#    tty: true
#    volumes:
##      - certs:/etc/nginx/certs
#      - ./docker/certbot/conf:/etc/letsencrypt
#      - ./docker/certbot/www:/var/www/certbot
#    command: certonly --webroot --webroot-path=/var/www/certbot --email info@geospatialdev.com --agree-tos --no-eff-email -d geospatialdev.com  -d www.geospatialdev.com
##    command: certonly --webroot -w /var/www/certbot --force-renewal --email info@geospatialdev.com -d geospatialdev.com  -d www.geospatialdev.com -d web.geospatialdev.com  -d www.web.geospatialdev.com --agree-tos

