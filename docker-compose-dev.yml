version: "3.8"


volumes:
  postgres_data:
    name: postgis_data
  static_volume:
    name: static
  media_volume:
    name: media
  redisdata:
    name: redis_data
  geoserver_data:
    name: geoserver_data
  pgadmin:
    name: pgadmin
  pgadmin_data:
    name: pgadmin_data
  react_build:
    name: react_build

networks:
  api:
    driver: bridge
    name: api



services:
  web:
    restart: always
    container_name: website
    build:
      context: ./geospatialDevSite
    expose:
      - 3000
    volumes:
      - ./geospatialDevSite:/var/www/html/ # inside the working directory
    

  api:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: api
    hostname: api
#    entrypoint: /home/app/api/start.sh
    volumes:
      - ./backend:/home/app/api
      - static_volume:/home/app/api/static
      - media_volume:/home/app/api/media
#    expose:
#      - 8000
#    ports:
#      - "8000:8000"
    env_file:
      - ./backend/.env
    restart: "on-failure"
    depends_on:
      - postgres-db
    networks:
      - api

  postgres-db:
    restart: "on-failure"
    image: kartoza/postgis:${POSTGIS_VERSION_TAG}
    container_name: postgres-db
    hostname: postgres-db # use this name to connect to pg admin instance in instead of default localhost
#    entrypoint: /home/app/api/start.sh
    ports:
      - "5432:5432"
    volumes:
      # - postgres_data:/var/lib/postgresql
      - ./data/pgdata:/var/lib/postgresql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_DB=${POSTGRES_DBS}
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    networks:
      - api

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    hostname: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
#    ports:
#      - "5050:80"
#    expose:
#      - 5050
    volumes:
      - pgadmin:/root/.pgadmin
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres-db
    networks:
      - api

  geoserver:
    restart: on-failure
    image: kartoza/geoserver:${GS_VERSION}
    container_name: geoserver
    hostname: geoserver
    volumes:
      - ./data/geodata:/opt/geoserver/data_dir
      - ./docker/geofence/geofence-server.properties:/opt/geoserver/data_dir/geofence/geofence-server.properties
#      - /tmp/settings/epsg.properties:/opt/geoserver/data_dir/user_projections/epsg.properties
    ports:
      - "8081:8080"
#    expose:
#      - 8080
    depends_on:
      - postgres-db
    networks:
      - api
    environment:
      - HOST=${POSTGRES_HOST}
      - DB_BACKEND=${DB_BACKEND} # Geoserver only accepts POSTGRES DB_BACKEND=POSTGRES
      - ENABLE_JSONP=true
      - GEOSERVER_DATA_DIR=${GEOSERVER_DATA_DIR}
      - GEOWEBCACHE_CACHE_DIR=${GEOWEBCACHE_CACHE_DIR}
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
      - INITIAL_MEMORY=${INITIAL_MEMORY}
      - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
#      - RECREATE_DATADIR=${RECREATE_DATADIR}
#      - SAMPLE_DATA=true
      - STABLE_EXTENSIONS=${STABLE_EXTENSIONS}
      - COMMUNITY_EXTENSIONS=${COMMUNITY_EXTENSIONS}

  nginx:
    restart: always
    build:
      context: ./docker/nginx/dev
    container_name: nginx
    volumes:
      - ./web:/home/web
      - ./docker/nginx/dev/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/api/static
      - media_volume:/home/api/media
    ports:
      - "80:80"
    networks:
      - api
#    depends_on:
#      - api
#      - web
#      - pgadmin
#      - geoserver



